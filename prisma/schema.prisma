generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String
  imageUrl    String?
  likedBy     String[]
  taskId      Int
  task        Task      @relation("TaskPost", fields: [taskId], references: [id])
  createdBy   User      @relation(fields: [createdById], references: [id])
  comments    Comment[] @relation("PostComments")
}

model Comment {
  id          Int      @id @default(autoincrement())
  message     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  likedBy     String[]
  createdById String
  postId      Int
  createdBy   User     @relation("UserComments", fields: [createdById], references: [id])
  post        Post     @relation("PostComments", fields: [postId], references: [id])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String     @id @default(cuid())
  name             String?
  email            String?    @unique
  emailVerified    DateTime?
  image            String?
  displayName      String?
  interestIds      Int[]
  themePreset      String?    @default("unset")
  followers        Follow[]   @relation("Followers")
  following        Follow[]   @relation("Following")
  accounts         Account[]
  posts            Post[]
  sessions         Session[]
  comments         Comment[]  @relation("UserComments")
  assignedtasks    Task[]     @relation("TaskAssigned")
  ownTasks         Task[]     @relation("TaskOwn")
  createdInterests Interest[] @relation("userCreatedInterests")
}

model Follow {
  id          String @id @default(uuid())
  followerId  String
  followingId String
  follower    User   @relation("Followers", fields: [followerId], references: [id])
  following   User   @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId], name: "follower_following_unique")
}

model Interest {
  id          Int    @id @default(autoincrement())
  name        String
  icon        String
  colour      String
  createdById String
  createdBy   User   @relation("userCreatedInterests", fields: [createdById], references: [id])
}

model Task {
  id          Int      @id @default(autoincrement())
  name        String
  type        String
  icon        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  interestIds Int[]
  user        User     @relation("TaskOwn", fields: [userId], references: [id], onDelete: Cascade)
  friends     User[]   @relation("TaskAssigned")
  posts       Post[]   @relation("TaskPost")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
